name: üöÄ Deploy to Production (Password Auth)

on:
    push:
        branches: [ main ]
    workflow_dispatch:

env:
    DEPLOY_PATH: /var/www/symfony

jobs:
    deploy:
        name: üöÄ Deploy to VPS
        runs-on: ubuntu-latest

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: üîß Install sshpass
              run: sudo apt-get update && sudo apt-get install -y sshpass

            - name: üöÄ Deploy to VPS with password
              env:
                  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
                  VPS_USER: ${{ secrets.VPS_USER }}
                  VPS_HOST: ${{ secrets.VPS_HOST }}
              run: |
                  # Cr√©er un script temporaire pour √©viter d'exposer le mot de passe
                  cat > deploy_script.sh << EOF
                  set -e

                  echo "üîÑ Starting deployment..."

                  #Creer le repertoire
                  mkdir /var/www/symfony

                  # Aller dans le r√©pertoire du projet
                  cd /var/www/symfony

                  # Afficher l'√©tat actuel
                  echo "üìç Current directory: $(pwd)"
                  echo "üìä Git status before update:"
                  git status --porcelain || true

                  # Sauvegarder les changements locaux si n√©cessaire
                  if [ -n "$(git status --porcelain)" ]; then
                    echo "üíæ Stashing local changes..."
                    git stash push -m "Auto-stash before deployment $(date)"
                  fi

                  # Mettre √† jour le code
                  echo "üì• Pulling latest changes..."
                  git fetch origin
                  git reset --hard origin/main

                  # Afficher le commit d√©ploy√©
                  echo "‚úÖ Deployed commit: $(git log -1 --format='%h - %s (%an, %ar)')"

                  # Ex√©cuter make prod
                  echo "üèóÔ∏è Running make prod..."
                  make prod

                  echo "üéâ Deployment completed successfully!"
                  EOF

                  # Ex√©cuter le script sur le serveur via SSH avec mot de passe
                  sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_HOST" 'bash -s' < deploy_script.sh

                  # Nettoyer le script temporaire
                  rm deploy_script.sh

            - name: üß™ Test deployment
              env:
                  VPS_HOST: ${{ secrets.VPS_HOST }}
              run: |
                  echo "üîç Testing deployment..."
                  sleep 10

                  # Test de connectivit√©
                  if curl -f -s --max-time 10 "http://$VPS_HOST:8000" > /dev/null; then
                    echo "‚úÖ Application is responding"
                  else
                    echo "‚ö†Ô∏è Application might not be responding correctly"
                    curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" "http://$VPS_HOST:8000" || echo "Failed to connect"
                  fi

            - name: üì¢ Deployment result
              if: always()
              run: |
                  if [ "${{ job.status }}" = "success" ]; then
                    echo "‚úÖ Deployment successful!"
                    echo "üåê Application: http://${{ secrets.VPS_HOST }}:8000"
                  else
                    echo "‚ùå Deployment failed!"
                  fi
